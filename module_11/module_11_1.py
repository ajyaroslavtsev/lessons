# -*- coding: utf-8 -*-


import requests
import pandas as pd
import numpy as np


# 1. Библиотека requests

'''
Коментарий: Python Requests — это библиотека, позволяющая отправлять HTTP-запросы разного уровня 
сложности веб-сервисам и получать от них соответствующие ответы. Она элегантно и просто выполняет 
HTTP-запросы, используя простой синтаксис. Теперь не нужно осваивать urllib2 с излишне сложными 
программными интерфейсами.
'''

# Метод get() - для отправки GET-запросов, которые предназначены для получения данных с сервера.
res = requests.get('https://api.github.com/events')

print(res.status_code) # код состояния ответа: 200 — Запрос прошёл успешно
print(res.text[:100])  # информация с сайта в виде строки 100 символов
print(res.headers['Date']) # Заголовок Date

# Метод post() - для отправки POST-запросов, которые обычно применяются для отправки данных на сервер.
url = 'https://httpbin.org/post'
data = {'name': 'Ivan', 'age': 30}
res = requests.post(url, data=data)

print(res.status_code)  # Код состояния ответа
print(res.json())       # Данные в формате JSON

# Метод put() - для обновления существующих данных на сервере.
url = 'https://httpbin.org/put'
data = {'name': 'Peter', 'age': 35}
res = requests.put(url, data=data)

print(res.status_code)  # Код состояния ответа
print(res.json())       # Данные в формате JSON

# 2. Библиотека pandas

'''
Коментарий: Pandas — это библиотека на языке Python для обработки и анализа данных. Она предоставляет 
специальные структуры данных и операции для манипулирования числовыми таблицами и временными рядами. 
Применяется практически в любой области, где требуется обработка и анализ табличных данных или временных рядов.
Pасширяет возможности Python за счёт интеграции с другими библиотеками. В частности, с NumPy, Matplotlib и Scikit-learn.
'''

# Создание датафрейма
df = pd.DataFrame({
    "A": 1.0,
    "B": pd.Timestamp("20130102"),
    "C": pd.Series(1, index=list(range(4)), dtype="float32"),
    "D": pd.Categorical(["test", "train", "test", "train"]),
    "E": "foo",
})

# Просмотр данных
print(df.head(2)) # Получение 3 записи из начала датафрейма
print(df.tail(1)) # Получение 1 записи из конца датафрейма

# Простой анализ данных
print(df.dtypes)  # Проверка типа данных датафрейма
print(df.describe()) # Статистические сведений о датафрейме
print(df.sort_values(by='D')) # Сортировка по столбцу 'D'


# 3. Библиотека numpy

'''
Коментарий: NumPy — это библиотека для эффективной работы с массивами любого размера. 
Она достигает высокой производительности, потому что написана частично на C и C++ 
и в ней соблюдается принцип локальности — она хранит все элементы последовательно в одном месте.
'''

# Массивы чисел
a = np.array([1, 2, 3])
a2 = np.array([[1, 2, 3], [4, 5, 6]])
a3 = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])

# Математические операции с массивами
a = a + 2
a2 = a2 * 3
a3 = a3 / 2

# Вывод в консоль
print(a)
print(a2)
print(a3)
